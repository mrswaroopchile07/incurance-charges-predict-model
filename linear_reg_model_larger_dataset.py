# -*- coding: utf-8 -*-
"""linear-reg-model-larger-dataset

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1L1JlnKrUp6gOv-0zByhcA6oW-wL8bidA
"""

#import the required libraries
import tensorflow as tf
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

#read the dataset from csv file
insurance = pd.read_csv('/content/insurance.csv')
#insurance.head()

insurance_one_hot = pd.get_dummies(insurance)
#insurance_one_hot.head()

X = insurance_one_hot.drop("charges", axis=1)
y = insurance_one_hot["charges"]

#test and train spliting 

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.2,random_state=42)

#create a insurance model

tf.random.set_seed(42)

insurance_model = tf.keras.Sequential([
                                       tf.keras.layers.Dense(1),
                                       tf.keras.layers.Dense(1)
])

insurance_model.compile(loss=tf.keras.losses.mae,
                        optimizer=tf.keras.optimizers.SGD(),
                        metrics=["mae"])

insurance_model.fit(X_train,y_train,epochs=100,verbose=0)

insurance_model.evaluate(X_test,y_test)

#Our model didn't perform very well, let's try a bigger model.

#We'll try 3 things:

##Increasing the number of layers (2 -> 3).
##Increasing the number of units in each layer (except for the output layer).
##Changing the optimizer (from SGD to Adam).

tf.random.set_seed(42)

insurance_model2 = tf.keras.Sequential([
                                        tf.keras.layers.Dense(100),
                                        tf.keras.layers.Dense(10),
                                        tf.keras.layers.Dense(1)
])

insurance_model2.compile(loss=tf.keras.losses.mae,
                         optimizer=tf.keras.optimizers.Adam(),
                         metrics=["mae"])

history = insurance_model2.fit(X_train,y_train,epochs=200,verbose=0)

insurance_model2.evaluate(X_test,y_test)

pd.DataFrame(history.history).plot()
plt.ylabel("loss")
plt.xlabel("epochs");

